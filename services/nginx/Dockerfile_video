# 原始来自 https://hub.docker.com/r/fsouza/video-nginx/dockerfile
# 生成镜像 docker build -f  services/nginx/Dockerfile_video -t video:01 . 在 dnmp目录下
# 运行镜像 docker run -itd --name video01 -p 8000:80 
#          -v //d/02Data/2019/dnmp/services/nginx/conf/nginx.conf:/usr/local/nginx/conf/nginx.conf 
#          -v //d/02Data/2019/dnmp/services/nginx/conf/all_websites.conf:/usr/local/nginx/conf/all_websites.conf 
#          -v //d/02Data/2019/dnmp/services/nginx/logs:/var/log/nginx/ video:01
# 运行镜像 
# 上面-v本地路径写法是git bash读取的路径
# 进入容器 docker exec -it del01 sh
# ffmpeg的版本是3.4.4
# 多个from的用法，参考 https://blog.csdn.net/Michaelwubo/article/details/91872076
# Dockerfile多阶段构建 https://maichong.io/help/docker/dockerfile-multi-stage.html

FROM alpine:3.8 as build
	
RUN apk add --no-cache curl build-base openssl openssl-dev zlib-dev linux-headers pcre-dev luajit luajit-dev ffmpeg ffmpeg-dev libjpeg-turbo libjpeg-turbo-dev
RUN mkdir nginx nginx-vod-module nginx-lua-module ngx_devel_kit nginx-rtmp-module nginx-thumb-module nginx-echo-module


ENV NGINX_VERSION 1.14.2
ENV VOD_MODULE_VERSION 1.23
ENV LUA_MODULE_VERSION v0.10.13
ENV DEV_MODULE_VERSION v0.3.0
ENV RTMP_MODULE_VERSION v1.2.1
ENV THUMB_MODULE_VERSION 0.9.0

RUN curl -sL https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz | tar -C nginx --strip 1 -xz
RUN curl -sL https://github.com/kaltura/nginx-vod-module/archive/${VOD_MODULE_VERSION}.tar.gz | tar -C nginx-vod-module --strip 1 -xz
RUN curl -sL https://github.com/openresty/lua-nginx-module/archive/${LUA_MODULE_VERSION}.tar.gz | tar -C nginx-lua-module --strip 1 -xz
RUN curl -sL https://github.com/openresty/echo-nginx-module/archive/v0.61.tar.gz | tar -C nginx-echo-module --strip 1 -xz
RUN curl -sL https://github.com/simpl/ngx_devel_kit/archive/${DEV_MODULE_VERSION}.tar.gz | tar -C ngx_devel_kit --strip 1 -xz
RUN curl -sL https://github.com/arut/nginx-rtmp-module/archive/${RTMP_MODULE_VERSION}.tar.gz | tar -C nginx-rtmp-module --strip 1 -xz
RUN curl -sL https://github.com/wandenberg/nginx-video-thumbextractor-module/archive/${THUMB_MODULE_VERSION}.tar.gz | tar -C nginx-thumb-module --strip 1 -xz

ENV LUAJIT_INC /usr/include/luajit-2.1/
ENV LUAJIT_LIB /usr/lib

WORKDIR /nginx
# --prefix的作用是就将所有资源都放在同个目录下，如可执行文件，库文件，配置文件都放在指定目录下
RUN ./configure --prefix=/usr/local/nginx \
	--with-ld-opt="-Wl,-rpath,/usr/lib/libluajit-5.1.so" \
	--add-module=../nginx-vod-module \
	--add-module=../ngx_devel_kit \
	--add-module=../nginx-lua-module \
	--add-module=../nginx-echo-module \
	--add-module=../nginx-thumb-module \
	--add-module=../nginx-rtmp-module \
	--with-file-aio \
	--with-threads \
	--with-cc-opt="-O3"
RUN make
RUN make install

# 多阶段构建
FROM alpine:3.8
RUN apk add --no-cache ca-certificates openssl pcre zlib luajit ffmpeg libjpeg-turbo
COPY --from=build /usr/local/nginx /usr/local/nginx

# 加用户nginx,启动nginx主进程用
RUN addgroup -g 101 -S nginx \
    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx
#RUN addgroup -g 499 -S nginx \
#    && adduser -HDu 499 -s /sbin/nologin -g 'web server' -G nginx nginx 



# 由于路径的问题比较多，本地所有配置文件放在services/nginx/conf下，服务器中对应放在 /usr/local/nginx/conf下，服务器中对应放在
# 构建时不传入配置文件，在运行镜像时再在volumes中映射时进去，如果命令行运行，使用-v来映射目录就行
#COPY ./conf/nginx.conf /usr/local/nginx/conf/nginx.conf
# 当前目录为/d/02Data/2019/dnmp时，执行docker build -f ./services/nginx/Dockerfile_video -t video:01 .
# COPY ./services/nginx/nginx.conf /usr/local/nginx/conf/nginx.conf
RUN mv /usr/local/nginx/conf/nginx.conf /usr/local/nginx/conf/nginx2.conf
# COPY ./html /usr/local/nginx/html
RUN rm -rf /usr/local/nginx/html /usr/loca/nginx/conf/*.default
ENTRYPOINT ["/usr/local/nginx/sbin/nginx"]
CMD ["-g", "daemon off;"]

# nginx的当前运行目录为 /usr/local/nginx,配置文件是/usr/local/nginx/conf/nginx.conf，在配置文件中的当前目录是/usr/local/nginx